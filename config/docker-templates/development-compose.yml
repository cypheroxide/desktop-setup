# Development Environment Docker Compose Template
# Includes common development services accessible via Tailscale

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dev-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devdb
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpassword
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - dev-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dev-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass devpassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dev-network

  # MongoDB
  mongo:
    image: mongo:6
    container_name: dev-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: devpassword
      MONGO_INITDB_DATABASE: devdb
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - dev-network

  # MySQL/MariaDB
  mariadb:
    image: mariadb:10
    container_name: dev-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: devdb
      MYSQL_USER: devuser
      MYSQL_PASSWORD: devpassword
    volumes:
      - mariadb_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - dev-network

  # Adminer - Database Management
  adminer:
    image: adminer:latest
    container_name: dev-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - dev-network

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: dev-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mariadb
      PMA_USER: devuser
      PMA_PASSWORD: devpassword
    ports:
      - "8081:80"
    depends_on:
      - mariadb
    networks:
      - dev-network

  # Node.js Development Environment
  node-dev:
    image: node:18-alpine
    container_name: dev-node
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./node-app:/app
      - node_modules:/app/node_modules
    ports:
      - "3000:3000"
      - "3001:3001"
    command: npm run dev
    networks:
      - dev-network

  # Python Development Environment
  python-dev:
    image: python:3.11-alpine
    container_name: dev-python
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./python-app:/app
    ports:
      - "8000:8000"
      - "8001:8001"
    command: python -m http.server 8000
    networks:
      - dev-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dev-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/conf.d:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - node-dev
      - python-dev
    networks:
      - dev-network

  # Mailhog - Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: dev-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dev-network

  # MinIO - S3 Compatible Storage
  minio:
    image: minio/minio:latest
    container_name: dev-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: miniopassword
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    command: server /data --console-address ":9001"
    networks:
      - dev-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: dev-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - dev-network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: dev-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - dev-network

  # Code Server (VS Code in Browser)
  code-server:
    image: codercom/code-server:latest
    container_name: dev-code-server
    restart: unless-stopped
    environment:
      - PASSWORD=devpassword
    volumes:
      - ./workspace:/home/coder/workspace
      - code_server_data:/home/coder/.local/share/code-server
    ports:
      - "8443:8080"
    networks:
      - dev-network

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  mariadb_data:
  node_modules:
  minio_data:
  elasticsearch_data:
  code_server_data:
